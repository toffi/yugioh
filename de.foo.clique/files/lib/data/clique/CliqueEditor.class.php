<?php/** * @author	$foo * @license	>Creative Commons Namensnennung 3.0 Deutschland License * @package	de.foo.clique */class CliqueEditor {	private static $allowedFileExtensions = null;	private static $illegalFileExtensions = array('php', 'php3', 'php4', 'php5', 'phtml');	public function __construct($cliqueID) {		$this->cliqueID = $cliqueID;	}	/**	 * Creates a new  photo	 */	public static function create($ownerID, $tmpName, $filename) {				// get image data		if (($imageData = @getImageSize($tmpName)) === false) {			throw new UserInputException('upload', 'badImage');		}				// get file extension by mime		$fileExtension = ImageUtil::getExtensionByMimeType($imageData['mime']);				// check file extension		if (!in_array($fileExtension, self::getAllowedFileExtensions())) {            $allowedExtensions = '';            foreach(self::getAllowedFileExtensions() as $value){                if(!empty($allowedExtensions)) $allowedExtensions .= ', ';                $allowedExtensions .= $value;            }             WCF::getTPL()->assign(array(                'allowedExtensions' => $allowedExtensions            ));			throw new UserInputException('upload', 'illegalExtension');		}		// get size		$width = $imageData[0];		$height = $imageData[1];		if (!$width || !$height) {			throw new UserInputException('upload', 'badImage');		}		// get filesize		$size = $usedQuota = intval(@filesize($tmpName));		// generate thumbnail if necessary		if ($width > WCF::getUser()->getPermission('user.clique.general.maxWidth') || $height > WCF::getUser()->getPermission('user.clique.general.maxHeight')) {			require_once(WCF_DIR.'lib/data/image/Thumbnail.class.php');			$thumbnail = new Thumbnail($tmpName, WCF::getUser()->getPermission('user.clique.general.maxWidth'), WCF::getUser()->getPermission('user.clique.general.maxHeight'));			$thumbnailSrc = $thumbnail->makeThumbnail();			if ($thumbnailSrc) {				$file = new File($tmpName);				$file->write($thumbnailSrc);				$file->close();				// refresh picture size				list($width, $height,) = @getImageSize($tmpName);				clearstatcache();				$size = @filesize($tmpName);				// get new file extension				$fileExtension = ImageUtil::getExtensionByMimeType($thumbnail->getMimeType());			}			unset($thumbnail, $thumbnailSrc);		}		// check size again		if ($size > WCF::getUser()->getPermission('user.clique.general.maxSize') && $width > WCF::getUser()->getPermission('user.clique.general.maxWidth') || $height > WCF::getUser()->getPermission('user.clique.general.maxHeight')) {			throw new UserInputException('upload', 'tooLarge');		}		// create hash		$photoHash = StringUtil::substring(StringUtil::getRandomID(), 0, 8);		$sql = "SELECT cliqueID			FROM wcf".WCF_N."_clique			ORDER BY cliqueID DESC";		$cliqueID = WCF::getDB()->getFirstRow($sql, Database::SQL_ASSOC);		$photoID = $cliqueID['cliqueID'];		// copy file		if (!@copy($tmpName, WCF_DIR.'images/clique/photo-'.$photoID.'-'.$photoHash.'.'.$fileExtension)) {			// copy failed, delete photo			@unlink($tmpName);			throw new UserInputException('upload', 'copyFailed');		}		// set permissions		@chmod(WCF_DIR.'images/clique/photo-'.$photoID.'-'.$photoHash.'.'.$fileExtension, 0666);		$photoName = 'photo-'.$photoID.'-'.$photoHash.'.'.$fileExtension;		$photo['photoName'] = $photoName;		$photo['photoWidth'] = $width;		$photo['photoHight'] = $height;		return $photo;	}		/**	 * Returns a list of allowed file extensions.	 */	public static function getAllowedFileExtensions() {		if (self::$allowedFileExtensions === null) {			self::$allowedFileExtensions = array();			self::$allowedFileExtensions = array_unique(explode("\n", StringUtil::unifyNewlines(WCF::getUser()->getPermission('user.clique.general.allowedFileExtensions'))));			self::$allowedFileExtensions = array_diff(self::$allowedFileExtensions, self::$illegalFileExtensions);		}		return self::$allowedFileExtensions;	}	/**	 * Returns a list of the last clique visitors.	 */	public static function getCliqueVisitors($cliqueID) {		require_once(WCF_DIR.'lib/data/user/UserProfile.class.php');		$cliqueVisitors = array();		$sql = "SELECT visitor.userID, visitor.time, avatar.*, user_table.*						FROM wcf".WCF_N."_clique_visitor visitor						LEFT JOIN 	wcf".WCF_N."_user user_table							ON (user_table.userID = visitor.userID)						LEFT JOIN 	wcf".WCF_N."_avatar avatar							ON (avatar.avatarID = user_table.avatarID)						WHERE cliqueID = ".$cliqueID."						ORDER BY visitor.time DESC LIMIT 0,".CLIQUE_VISITORS;		$result = WCF::getDB()->sendQuery($sql);		while ($row = WCF::getDB()->fetchArray($result)) {			$cliqueVisitors[] = new UserProfile(null, $row);		}		return $cliqueVisitors;	}	/**	 * Insert user as visitor	 */	public static function insertVisitor($cliqueID) {		$sql = "INSERT INTO wcf".WCF_N."_clique_visitor (cliqueID, userID, time)						VALUES ('".$cliqueID."', '".WCF::getUser()->userID."', '".TIME_NOW."')						ON DUPLICATE KEY						UPDATE time = VALUES(time)";		WCF::getDB()->sendQuery($sql);	}	/**	 * Clean the visitor	 */	public static function cleanVisitors($cliqueID) {		$count = 0;		$anz = 2;		$deleteIDs = array();		$sql = "SELECT			userID						FROM				wcf".WCF_N."_clique_visitor						WHERE			cliqueID = '".$cliqueID."'						ORDER BY		time DESC LIMIT 0,".CLIQUE_VISITORS	;		$result = WCF::getDB()->sendQuery($sql);		while ($row = WCF::getDB()->fetchArray($result)) {			if($count > $anz) $deleteIDs[] = $row['userID'];			$count++;		}		if(count($deleteIDs) > 0) {			$deleteIDString = implode(',', $deleteIDs);			$sql = "DELETE FROM wcf".WCF_N."_clique_visitor WHERE userID IN (".$deleteIDString.") AND cliqueID = ".$cliqueID;			WCF::getDB()->sendQuery($sql);		}	}	/**	 * Get permission	 *	 */	public static function getCliquePermission($permission, $cliqueID = 0) {        if(empty($cliqueID)) $cliqueID = self::getCurrentCliqueID();		$sql = "SELECT permission.*			FROM wcf".WCF_N."_clique_group_rights permission			WHERE permission.cliqueID =".$cliqueID;		$permissionResult = WCF::getDB()->getFirstRow($sql, Database::SQL_ASSOC);		$sql = "SELECT user_to_clique.groupType			FROM wcf".WCF_N."_user_to_clique user_to_clique			WHERE user_to_clique.userID=".WCF::getUser()->userID."                AND cliqueID=".$cliqueID;		$groupResult = WCF::getDB()->getFirstRow($sql, Database::SQL_ASSOC);			//Kein Ergebnis? User ist Gast		if(empty($groupResult['groupType'])) {			$groupResult['groupType'] = 1;		}			//User ist Gründer? Vollzugriff		if($groupResult['groupType'] == 5) {			$permissionResult[$permission.$groupResult['groupType']] = 1;		}			//Unbekanntes Recht? FALSE		if(!isset($permissionResult[$permission.$groupResult['groupType']])) {			$permissionResult[$permission.$groupResult['groupType']] = FALSE;		}		return $permissionResult[$permission.$groupResult['groupType']];	}    public static function getCurrentCliqueID() {	   if(isset($_REQUEST['cliqueID'])) $cliqueID = intval($_REQUEST['cliqueID']);        else throw new IllegalLinkException();        return $cliqueID;    }}?>