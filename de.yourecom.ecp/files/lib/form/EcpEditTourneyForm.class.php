<?phprequire_once(WCF_DIR.'lib/form/AbstractForm.class.php');require_once(WCF_DIR.'lib/page/util/InlineCalendar.class.php');require_once(WCF_DIR.'lib/page/ECPHeadPage.class.php');// wbb importsrequire_once(WBB_DIR.'lib/data/boxes/CalendereventsBox.class.php');/** * @author	SpIkE2*/class EcpEditTourneyForm extends AbstractForm {	public $templateName = 'EcpEditTourney';	public $deadlineTimeDay = '';	public $deadlineTimeMonth = '';	public $deadlineTimeYear = '';	public $deadlineTimeHour = '';	public $deadlineTimeMinutes = '0';	public $name = '';	public $lobby = '';	public $art = '';	public $offiziell = '';	public $participiants = '';	public $description = '';	public $officialEvent = 0;	/**	 * @see Page::readParameters()	 */	public function readParameters() {		parent::readParameters();		if(isset($_GET['eventID'])) $this->eventID = intval($_GET['eventID']);		$this->participiantsArray = array (			'4' => "4 ".WCF::getLanguage()->get('wcf.ecp.tourney.insert.tourney.gamer'),			'8' => "8 ".WCF::getLanguage()->get('wcf.ecp.tourney.insert.tourney.gamer'),			'16' => "16 ".WCF::getLanguage()->get('wcf.ecp.tourney.insert.tourney.gamer'),			'32' => "32 ".WCF::getLanguage()->get('wcf.ecp.tourney.insert.tourney.gamer'),			'64' => "64 ".WCF::getLanguage()->get('wcf.ecp.tourney.insert.tourney.gamer')		);		$this->lobbyArray = array(			1 => WCF::getLanguage()->get('wcf.ecp.tourney.lobby.germany'),			'2' => WCF::getLanguage()->get('wcf.ecp.tourney.lobby.english'),			'3' => WCF::getLanguage()->get('wcf.ecp.tourney.lobby.france'),			'4' => WCF::getLanguage()->get('wcf.ecp.tourney.lobby.japanese'),			'5' => WCF::getLanguage()->get('wcf.ecp.tourney.lobby.spanish'),			'6' => WCF::getLanguage()->get('wcf.ecp.tourney.lobby.korea'),			'7' => WCF::getLanguage()->get('wcf.ecp.tourney.lobby.zh'),			'8' => WCF::getLanguage()->get('wcf.ecp.tourney.lobby.world'));		$this->artArray = array (			'3' => WCF::getLanguage()->get('wcf.ecp.tourney.insert.tourney.kosystem'),		);// 			'4' => WCF::getLanguage()->get('wcf.ecp.tourney.insert.tourney.vorrunde'),		$this->officialEventArray = array (			'0' => '-',			'1' => WCF::getLanguage()->get('wcf.ecp.tourney.insert.tourney.MNW'),			'2' => WCF::getLanguage()->get('wcf.ecp.tourney.insert.tourney.WDFT'),			'3' => WCF::getLanguage()->get('wcf.ecp.tourney.insert.tourney.BF'),		);	}	public function readData() {		parent::readData();			// Hole die Tuniere		$sql = "SELECT							events.id,							events.name,							events.time,							events.contacts,							events.art,							events.participants,							events.status,							events.description,							events.lobby,							events.calender,							events.officialEvent,							wcf1_user.username						FROM		events						LEFT JOIN	 wcf1_user							ON (wcf1_user.userID=events.contacts)						WHERE events.id = ".$this->eventID;		$this->tourneyList = WCF::getDB()->getFirstRow($sql);		if(!WCF::getUser()->getPermission('mod.ecp.canEditEveryResult') && $this->tourneyList['contacts'] != WCF::getUser()->userID)			throw new PermissionDeniedException();				// format time		if (($this->tourneyList['time'] != null) && ($this->tourneyList['time'] != '0')) {		 	$this->tourneyList['deadlineTimeDay'] = date("j", $this->tourneyList['time']);			$this->tourneyList['deadlineTimeMonth'] = date("n", $this->tourneyList['time']);			$this->tourneyList['deadlineTimeYear'] = date("Y", $this->tourneyList['time']);			$this->tourneyList['deadlineTimeHour'] = date("G", $this->tourneyList['time']);			$this->tourneyList['deadlineTimeMinutes'] = intval(date("i", $this->tourneyList['time']));		}	}	/**	 * @see Page::assignVariables()	 */	public function readFormParameters() {		parent::readFormParameters();		if (isset($_POST['name'])) $this->name = $_POST['name'];			else $this->name = '';		if (isset($_POST['lobby'])) $this->lobby = $_POST['lobby'];			else $this->lobby = '';		if (isset($_POST['art'])) $this->art = $_POST['art'];			else $this->art = '';		if (isset($_POST['offiziell'])) $this->offiziell = $_POST['offiziell'];			else $this->offiziell = 0;		if (isset($_POST['participiants'])) $this->participiants = $_POST['participiants'];			else $this->participiants = '';		if (!empty($_POST['officialEvent'])) $this->officialEvent = $_POST['officialEvent'];			else $this->officialEvent = '';		if (isset($_POST['description'])) $this->description = $_POST['description'];			else $this->description = '';		if (isset($_POST['deadlineTimeDay'])) {			if ($_POST['deadlineTimeDay'] == '0') {					$this->deadlineTimeDay = '';				}				else {					$this->deadlineTimeDay = intval($_POST['deadlineTimeDay']);				}			}		if (isset($_POST['deadlineTimeMonth'])) {			if ($_POST['deadlineTimeMonth'] == '0') {					$this->deadlineTimeMonth = '';				}				else {					$this->deadlineTimeMonth = intval($_POST['deadlineTimeMonth']);				}			}		if (isset($_POST['deadlineTimeYear'])) {				if (($_POST['deadlineTimeYear'] == '0') || ($_POST['deadlineTimeYear'] == '')) {					$this->deadlineTimeYear = '';				}				else {					$this->deadlineTimeYear = intval($_POST['deadlineTimeYear']);				}			}		if (isset($_POST['deadlineTimeHour'])) {				if ($_POST['deadlineTimeHour'] != '') {					$this->deadlineTimeHour = intval($_POST['deadlineTimeHour']);				}			}		if (isset($_POST['deadlineTimeMinutes'])) {				if ($_POST['deadlineTimeMinutes'] != '') {					$this->deadlineTimeMinutes = intval($_POST['deadlineTimeMinutes']);				}			}		if (isset($_POST['calender']))			$this->calender = intval($_POST['calender']);	}	/**	 * Converts and validates the date input fields of the InlineCalendar.	 */	public function convertAndValidateDate() {		if ($this->deadlineTimeDay || $this->deadlineTimeMonth || $this->deadlineTimeYear || $this->deadlineTimeHour || $this->deadlineTimeMinutes) {			$time = @gmmktime($this->deadlineTimeHour,								$this->deadlineTimeMinutes,								0,								$this->deadlineTimeMonth,								$this->deadlineTimeDay,								$this->deadlineTimeYear);			// since php5.1.0 mktime returns false on failure			if ($this->deadlineTimeMonth === '' || $time === false || $time === -1) {				// error while conversion or empty -> throw empty exception				throw new UserInputException('deadlineTime', 'empty');			}			// get utc time			$time = DateUtil::getUTC($time);			if (($time <= TIME_NOW) && $this->additionalDeadlineTimeCheck($time)) {				// check if a future date is entered				throw new UserInputException('deadlineTime', 'invalid.future');			}			// assign converted value			$this->deadlineTime = $time;		}		else {			// no deadlineTime entered				throw new UserInputException('deadlineTime', 'empty');		}	}	/**	 * This method does additional time checks of the deadlineTime.	 * @param time - entered deadline time	 */	protected function additionalDeadlineTimeCheck($time) {		return true;	}	/**	 * @see Page::validate()	 */	public function validate() {		parent::validate();		if(!empty($this->name)) $this->name = StringUtil::trim($this->name);			else throw new UserInputException('name','empty');		if (!empty($this->art)) $this->art = StringUtil::trim($this->art);			else throw new UserInputException('art','empty');		if (!empty($this->calender)) $this->calender = intval($this->calender);		if (!empty($this->officialEvent)) $this->officialEvent = intval($this->officialEvent);		if (!empty($this->lobby)) $this->lobby = StringUtil::trim($this->lobby);			else throw new UserInputException('lobby','empty');		if (!empty($this->participiants)) $this->participiants = StringUtil::trim($this->participiants);			else throw new UserInputException('participiants','empty');		if (!empty($this->description)) $this->description = StringUtil::trim($this->description);			else throw new UserInputException('description','empty');		$this->convertAndValidateDate();	}	/**	 * @see Form::save()	 */	public function save(){		parent::save();			//// Updaten ////		$sql = "UPDATE events						SET name = '".escapeString($this->name)."',								art = '$this->art',								calender = '$this->calender',								participants = '$this->participiants',								description = '".escapeString($this->description)."',								time = '$this->deadlineTime',								lobby = '$this->lobby',								officialEvent ='$this->officialEvent'						WHERE 	id = '$this->eventID'";		WCF::getDB()->sendQuery($sql);		if(!empty($this->calender)) {			$this->text = $this->description;			$this->text .= WCF::getLanguage()->get('wcf.ecp.tourney.insert.tourney.calender', array('$eventID' => $this->eventID));			$sql = "UPDATE wcf1_calendar_event							SET eventTime = '".$this->deadlineTime."'							WHERE 	  	eventID = ".$this->calender;			WCF::getDB()->sendQuery($sql);			$sql = "UPDATE wcf1_calendar_event_message							SET subject = '".escapeString($this->name)."',									message  = '".escapeString($this->text)."'							WHERE 	  	eventID = ".$this->calender;			WCF::getDB()->sendQuery($sql);				// Delete Calender Cache			$box = PortalBox::getBoxByName('calenderevents');			$box->clearDataCache();			WCF::getCache()->clear(WBB_DIR . 'cache/', 'cache.CalenderIndex.php');		}			// Redirect		WCF::getTPL()->assign(array(			'url' => "index.php?page=ECPTourney".SID_ARG_2ND,			'message' => WCF::getLanguage()->get('wcf.ecp.tourney.edit.succesful')		));		WCF::getTPL()->display('redirect');		exit;	}	public function assignVariables(){		// init calendar data		InlineCalendar::assignVariables();		parent::assignVariables();		// mark ECP as active		require_once(WCF_DIR.'lib/page/util/menu/PageMenu.class.php');		PageMenu::setActiveMenuItem('wcf.header.menu.ecp');			//// Give Template ////		WCF::getTPL()->assign(array(			'tourneyList' 		=> $this->tourneyList,			'deadlineTimeDay' 		=> $this->deadlineTimeDay,			'deadlineTimeMonth' 	=> $this->deadlineTimeMonth,			'deadlineTimeYear' 		=> $this->deadlineTimeYear,			'deadlineTimeHour' 		=> $this->deadlineTimeHour,			'deadlineTimeMinutes' 	=> $this->deadlineTimeMinutes,			'name' 	=> $this->name,			'lobby' 	=> $this->lobby,			'art' 	=> $this->art,			'participiants' 	=> $this->participiants,			'description' 	=> $this->description,			'officialEvent' 	=> $this->officialEvent,			'lobbyArray' 	=> $this->lobbyArray,			'artArray' 	=> $this->artArray,			'participiantsArray' 	=> $this->participiantsArray,			'officialEventArray' 	=> $this->officialEventArray		));	}	public function show() {		parent::show();	}}?>